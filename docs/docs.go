// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/genimg/check": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai-router"
                ],
                "summary": "获取状态",
                "parameters": [
                    {
                        "description": "请求参数",
                        "name": "create",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_object.CheckStatusReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/view_object.GenerateResp"
                        }
                    }
                }
            }
        },
        "/genimg/txt2img": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai-router"
                ],
                "summary": "文生图",
                "parameters": [
                    {
                        "description": "请求参数",
                        "name": "create",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request_object.GenerateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/view_object.GenerateResp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "request_object.CheckStatusReq": {
            "type": "object",
            "required": [
                "job_id"
            ],
            "properties": {
                "job_id": {
                    "description": "任务ID",
                    "type": "string"
                }
            }
        },
        "request_object.GenerateReq": {
            "type": "object",
            "properties": {
                "async": {
                    "description": "是否异步",
                    "type": "boolean"
                },
                "input": {
                    "type": "object",
                    "required": [
                        "prompt"
                    ],
                    "properties": {
                        "height": {
                            "description": "高 px",
                            "type": "integer"
                        },
                        "image_url": {
                            "description": "用于图生图的图片url",
                            "type": "string"
                        },
                        "prompt": {
                            "description": "文生图描述语句",
                            "type": "string"
                        },
                        "seed": {
                            "description": "种子ID",
                            "type": "integer"
                        },
                        "width": {
                            "description": "ImageNum int    ` + "`" + `json:\"image_num\" validate:\"omitempty,min=1,max=2\" ` + "`" + `  // 输出数量",
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "view_object.GenerateResp": {
            "type": "object",
            "properties": {
                "delayTime": {
                    "description": "已执行时间",
                    "type": "integer"
                },
                "executionTime": {
                    "description": "总执行时间,Status=COMPLETED时有值",
                    "type": "integer"
                },
                "id": {
                    "description": "进程ID",
                    "type": "string"
                },
                "output": {
                    "description": "输出,Status=COMPLETED时有值",
                    "type": "object",
                    "properties": {
                        "image_url": {
                            "description": "图片路径",
                            "type": "string"
                        },
                        "images": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "seed": {
                            "type": "integer"
                        }
                    }
                },
                "status": {
                    "description": "IN_QUEUE=队列中,IN_PROGRESS=进程中,COMPLETED=已完成",
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
